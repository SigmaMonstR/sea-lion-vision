hist(data^0.5)
data = rnorm(1000,50,2)
hist(data)
hist(data^0.4)
data = rnorm(1000,1,2)
data = rnorm(1000,1,2)
hist(data)
data = rnorm(1000,0,2)
hist(data)
hist(data^0.4)
data = rnorm(10000,0,20)
hist(data)
hist(data^0.4)
hist(data^2)
data = rnorm(10000,100,20)
hist(data)
hist(data^2)
data = rnorm(10000,100,20)
data = rnorm(10000,1000,20)
hist(data)
hist(data^2)
hist(data^0.5)
hist(data)
hist(data^0.5)
data = rnorm(10000,100,20)
hist(data)
hist(data^0.5)
data = rnorm(10000,3,20)
hist(data)
hist(data^0.5)
hist(rbeta(10000,5,2))
hist(rbeta(10000,5,1))
hist(rbeta(10000,2,2))
hist(rbeta(10000,2,5))
hist(rbeta(10000,2,5)^2)
hist(rnorm(10000,1,1)
)
hist(rbeta(10000,2,5)^0.5, main="Skewed^0.5")
hist(rbeta(10000,2,5)^2, main="Skewed^2")
hist(rbeta(10000,2,5)^0.5, main="Skewed^0.5")
par(mfrow = c(2, 2))
hist(rnorm(10000,1,1), main = "Normal")
hist(rbeta(10000,2,5), main = "skewed distribution")
hist(rbeta(10000,2,5)^2, main="Skewed^2")
hist(rbeta(10000,2,5)^0.5, main="Skewed^0.5")
ppl <- c("Star","Pri","Rebecca")
random_task <- function(people){
df = data.frame(val = runif(length(people)), people = people)
df = df[order(df$val),]
return(df[1,2])
}
ppl <- c("Star","Pri","Rebecca")
random_task <- function(people){
df = data.frame(val = runif(length(people)), people = people)
df = df[order(df$val),]
return(df[1,2])
}
random_task(ppl)
ppl <- c("Star","Pri","Rebecca")
random_task <- function(people){
df = data.frame(val = runif(length(people)), people = people)
df = df[order(df$val),]
return(df[1,2])
}
random_task(ppl)
ppl <- c("Star","Pri","Rebecca")
random_task <- function(people){
df = data.frame(val = runif(length(people)), people = people)
df = df[order(df$val),]
return(df[1,2])
}
random_task(ppl)
ppl <- c("Star","Pri","Rebecca")
random_task <- function(people){
df = data.frame(val = runif(length(people)), people = people)
df = df[order(df$val),]
return(df[1,2])
}
random_task(ppl)
ppl <- c("Star","Pri","Rebecca")
random_task <- function(people){
df = data.frame(val = runif(length(people)), people = people)
df = df[order(df$val),]
return(df[1,2])
}
random_task(ppl)
strat1 <- function(t,dec){
if( t == 1){
val = 0
} else {
val = dec[t-1]
}
}
dec = c()
strat1(1,dec)
dec = c()
strat1 <- function(t,dec){
if( t == 1){
return(0)
} else {
return(dec[t-1])
}
}
strat1(1,dec)
dec = c(1)
strat1 <- function(t,dec){
if( t == 1){
return(0)
} else {
return(dec[t-1])
}
}
strat1(1,dec)
strat1(0,dec)
length(dec)
strat1 <- function(dec){
if( length(dec) == 1){
return(0)
} else {
return(dec[t-1])
}
}
strat1(1,dec)
strat1(dec)
dec = c(1)
length(dec)
strat1 <- function(dec){
if( length(dec) == 0){
return(0)
} else {
return(dec[t-1])
}
}
strat1(dec)
dec = c(1)
length(dec)
strat1 <- function(dec){
if( length(dec) == 0){
return(0)
} else {
return(dec[length(dec)-1])
}
}
strat1(dec)
dec = c(1)
length(dec)
strat1 <- function(dec){
if( length(dec) == 0){
return(0)
} else {
return(dec[length(dec)-1])
}
}
strat1(dec)
dec = c()
length(dec)
strat1 <- function(dec){
if( length(dec) == 0){
return(0)
} else {
return(dec[length(dec)-1])
}
}
strat1(dec)
for(k in 1:100){
dec <- c(dec,strat1(dec))
}
dec
strat1(dec)
dec
sample(ppl,1)
ppl <- c("Star","Pri","Rebecca")
random_task <- function(people){
return(sample(people,1))
}
random_task(ppl)
random_task(ppl)
k = 10
d = seq(2,k,1)
k %% d
(k %% d >0)
sum(k %% d == 0))
sum(k %% d == 0)
count += 1
count = 0
k = 10
d = seq(2,k,1)
if(sum(k %% d == 0)>2){
count = count + 1
}
count
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(2,k,1)
if(sum(k %% d == 0)==2){
count = count + 1
}
}
return(count)
}
primer(10)
primer <- function(k){
count = 0
for(i in 1:k){
print(i)
d = seq(2,k,1)
if(sum(k %% d == 0)==2){
count = count + 1
}
}
return(count)
}
primer(10)
sum(k %% d == 0)
3 %% d
primer <- function(k){
count = 0
for(i in 1:k){
print(i)
d = seq(2,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}
}
return(count)
}
primer(10)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}
}
return(count)
}
primer(10)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}
}
return(count)
}
primer(1)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}
}
return(count)
}
primer(10000)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}}
return(count)
}
primer(10)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}}
return(count)
}
primer(2)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}}
return(count)
}
primer(3)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}}
return(count+1)
}
primer(3)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}}
return(count+1)
}
primer(4)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}}
return(count+1)
}
primer(4)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}}
return(count+1)
}
primer(1000)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}}
return(count+1)
}
primer(10)
primer <- function(k){
prime_val <-c()
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
prime_val <- c(prime_val,i)
}}
return(prime_val)
}
primer(10)
primer <- function(k){
prime_val <-c()
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2 || i == 1){
prime_val <- c(prime_val,i)
}}
return(prime_val)
}
primer(10)
primer <- function(k){
prime_val <-c()
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2 || i == 1){
prime_val <- c(prime_val,i)
}}
return(prime_val)
}
primer(100000)
primer(1000)
primer <- function(k){
prime_val <-c()
for(i in 1:k){
if(sum(i %% seq(1,i,1) == 0)==2 || i == 1){
prime_val <- c(prime_val,i)
}}
return(prime_val)
}
primer(10000)
primer <- function(k){
prime_val <-c()
for(i in 1:k){
if(sum(i %% seq(1,i,1) == 0)==2 || i == 1){
prime_val <- c(prime_val,i)
}}
return(prime_val)
}
a <- primer(1000000)
a <- primer(100000)
primer <- function(k, cores){
require(doParallel)
registerDoParallel(cores=cores)
prime_val <-c()
foreach(i=1:k) %dopar% {
if(sum(i %% seq(1,i,1) == 0)==2 || i == 1){
prime_val <- c(prime_val,i)
}
}
return(prime_val)
}
a <- primer(10000)
a <- primer(10000,2)
a
primer <- function(k, cores){
require(doParallel)
registerDoParallel(cores=cores)
prime_val <-c()
prime_val <- foreach(i=1:k, .combine='c') %dopar% {
if(sum(i %% seq(1,i,1) == 0)==2 || i == 1){
i
}
}
return(prime_val)
}
a <- primer(10000)
a
primer <- function(k){
prime_val <-c()
for(i in 1:k){
if(sum(i %% seq(1,i,1) == 0)==2 || i == 1){
prime_val <- c(prime_val,i)
}}
return(prime_val)
}
ptm <- proc.time()
a <- primer(10000)
proc.time()-ptm
primer <- function(k, cores){
require(doParallel)
registerDoParallel(cores=cores)
prime_val <-c()
prime_val <- foreach(i=1:k, .combine='c') %dopar% {
if(sum(i %% seq(1,i,1) == 0)==2 || i == 1){
i
}
}
return(prime_val)
}
ptm <- proc.time()
a <- primer(10000,2)
proc.time()-ptm
ptm <- proc.time()
a <- primer(10000,3)
proc.time()-ptm
ptm <- proc.time()
a <- primer(100000,3)
proc.time()-ptm
length(a)
primer <- function(k){
prime_val <-c()
for(i in 1:k){
if(sum(i %% seq(1,i,1) == 0)==2 || i == 1){
prime_val <- c(prime_val,i)
}}
return(prime_val)
}
ptm <- proc.time()
a <- primer(100000)
proc.time()-ptm
length(a)
a
#####################################
###PREPARE IMAGES FOR HACK SESSION###
#####################################
target_folder <- "target_folder"
###Set Directories
source_img_dir <- "/Users/sigmamonstr/Github/noaa_seals/tutorial/images"
code_dir <- "/Users/sigmamonstr/Github/noaa_seals/code/R"
dest_dir <- paste("/Users/sigmamonstr/Github/noaa_seals/code/R/",target_folder,sep="")
###Set Libraries
library(EBImage)
source(paste(code_dir,"func_countSeals.R",sep="/"))
source(paste(code_dir,"func_cookiecutter.R",sep="/"))
###MASKING
#Get data
setwd(source_img_dir)
datasets = list.files(pattern="*.jpg")
for(z in 1:length(datasets)){
#Read in image
seals <- readImage(datasets[z])
display(seals)
#Create mask(image, levels_adjustment, offset or threshold of image)
masked <- countSeals(seals, 0.5,0.2)
###USER-BASED CANDIDATE SEAL SCREENING
#Set target directory
setwd(dest_dir)
#Run training set builder
cookiecutter(seals,masked,max(masked),datasets[z])
}
z
datasets[z]
seals <- readImage(datasets[z])
seals <- readImage(datasets[z])
datasets = list.files(pattern="*.jpg")
setwd(source_img_dir)
datasets = list.files(pattern="*.jpg")
seals <- readImage(datasets[z])
for(z in 2:length(datasets)){
setwd(source_img_dir)
#Read in image
seals <- readImage(datasets[z])
display(seals)
#Create mask(image, levels_adjustment, offset or threshold of image)
masked <- countSeals(seals, 0.5,0.2)
###USER-BASED CANDIDATE SEAL SCREENING
#Set target directory
setwd(dest_dir)
#Run training set builder
cookiecutter(seals,masked,max(masked),datasets[z])
}
