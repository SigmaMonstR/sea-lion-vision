}
return(count)
}
primer(10000)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}}
return(count)
}
primer(10)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}}
return(count)
}
primer(2)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}}
return(count)
}
primer(3)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}}
return(count+1)
}
primer(3)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}}
return(count+1)
}
primer(4)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}}
return(count+1)
}
primer(4)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}}
return(count+1)
}
primer(1000)
primer <- function(k){
count = 0
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
count = count + 1
}}
return(count+1)
}
primer(10)
primer <- function(k){
prime_val <-c()
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2){
prime_val <- c(prime_val,i)
}}
return(prime_val)
}
primer(10)
primer <- function(k){
prime_val <-c()
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2 || i == 1){
prime_val <- c(prime_val,i)
}}
return(prime_val)
}
primer(10)
primer <- function(k){
prime_val <-c()
for(i in 1:k){
d = seq(1,i,1)
if(sum(i %% d == 0)==2 || i == 1){
prime_val <- c(prime_val,i)
}}
return(prime_val)
}
primer(100000)
primer(1000)
primer <- function(k){
prime_val <-c()
for(i in 1:k){
if(sum(i %% seq(1,i,1) == 0)==2 || i == 1){
prime_val <- c(prime_val,i)
}}
return(prime_val)
}
primer(10000)
primer <- function(k){
prime_val <-c()
for(i in 1:k){
if(sum(i %% seq(1,i,1) == 0)==2 || i == 1){
prime_val <- c(prime_val,i)
}}
return(prime_val)
}
a <- primer(1000000)
a <- primer(100000)
primer <- function(k, cores){
require(doParallel)
registerDoParallel(cores=cores)
prime_val <-c()
foreach(i=1:k) %dopar% {
if(sum(i %% seq(1,i,1) == 0)==2 || i == 1){
prime_val <- c(prime_val,i)
}
}
return(prime_val)
}
a <- primer(10000)
a <- primer(10000,2)
a
primer <- function(k, cores){
require(doParallel)
registerDoParallel(cores=cores)
prime_val <-c()
prime_val <- foreach(i=1:k, .combine='c') %dopar% {
if(sum(i %% seq(1,i,1) == 0)==2 || i == 1){
i
}
}
return(prime_val)
}
a <- primer(10000)
a
primer <- function(k){
prime_val <-c()
for(i in 1:k){
if(sum(i %% seq(1,i,1) == 0)==2 || i == 1){
prime_val <- c(prime_val,i)
}}
return(prime_val)
}
ptm <- proc.time()
a <- primer(10000)
proc.time()-ptm
primer <- function(k, cores){
require(doParallel)
registerDoParallel(cores=cores)
prime_val <-c()
prime_val <- foreach(i=1:k, .combine='c') %dopar% {
if(sum(i %% seq(1,i,1) == 0)==2 || i == 1){
i
}
}
return(prime_val)
}
ptm <- proc.time()
a <- primer(10000,2)
proc.time()-ptm
ptm <- proc.time()
a <- primer(10000,3)
proc.time()-ptm
ptm <- proc.time()
a <- primer(100000,3)
proc.time()-ptm
length(a)
primer <- function(k){
prime_val <-c()
for(i in 1:k){
if(sum(i %% seq(1,i,1) == 0)==2 || i == 1){
prime_val <- c(prime_val,i)
}}
return(prime_val)
}
ptm <- proc.time()
a <- primer(100000)
proc.time()-ptm
length(a)
a
target_folder <- "target_folder"
###Set Directories
image_dir <- paste("/Users/sigmamonstr/Github/noaa_seals/code/R/",target_folder,sep="")
setwd(image_dir)
getwd
getwd()
target_folder <- "target_folder"
class1 <- "none"
class2 <- "seal"
###Set Directories
image_dir <- paste("/Users/sigmamonstr/Github/noaa_seals/code/R/",target_folder,sep="")
setwd(image_dir)
require(EBImage)
###Set Directories
target_folder <- "target_folder"
class1 <- "none"
class2 <- "seal"
image_dir <- paste("/Users/sigmamonstr/Github/noaa_seals/code/R/",target_folder,sep="")
setwd(image_dir)
setwd(paste("image_dir","/",class1,sep=""))
require(EBImage)
###Set Directories
target_folder <- "target_folder"
class1 <- "none"
class2 <- "seal"
image_dir <- paste("/Users/sigmamonstr/Github/noaa_seals/code/R/",target_folder,sep="")
##Load in image
setwd(paste("image_dir","/",class1,sep=""))
setwd(paste("image_dir",class1,sep=""))
image_dir <- paste("/Users/sigmamonstr/Github/noaa_seals/code/R/",target_folder,sep="")
setwd(paste(image_dir,class1,sep=""))
setwd(paste(image_dir,class1,sep="/"))
datasets = list.files(pattern="*.jpg")
img_set = list.files(pattern="*.jpg")
z=1
seals <- readImage(img_set[z])
display(seals)
img <- readImage(img_set[z])
r = resizePixels(img, 150, 150)
r = resize(img, w = 150, h = 150)
display(r)
r
as.vector(r)
150^2
resize_edge = 100
100^2
z <- as.array(r)
img <- readImage(img_set[z])
r = resize(img, w = resize_edge, h = resize_edge)
img = (r[,,1]+r[,,2]+r[,,3])/3
z
z=1
img <- readImage(img_set[z])
r = resize(img, w = resize_edge, h = resize_edge)
img = (r[,,1]+r[,,2]+r[,,3])/3
diaply(img)
display(img)
img <- readImage(img_set[z])
r = resize(img, w = resize_edge, h = resize_edge)
display(r)
display(r[,,1])
display(r[,,2])
display(r[,,3])
hist(r[,,1])
hist(r[,,2])
hist(r[,,3])
r@colormode
img <- readImage(img_set[z])
r = resize(img, w = resize_edge, h = resize_edge)
img = (r@.Data[,,1]+r@.Data[,,2]+r@.Data[,,3])/3
display(img)
as.vector(img)
a = matrix(img,nrow=1,ncol= resize_edge^2)
a = cbind(1,matrix(img,nrow=1,ncol= resize_edge^2))
View(a)
a = data.frame(target = 1,matrix(img,nrow=1,ncol= resize_edge^2))
View(a)
c(class1,class2)
print(paste(classes,": ",round(100*k/length(img_set),1),"%",sep=""))
require(EBImage)
###Set Directories
target_folder <- "target_folder"
class1 <- "none"
class2 <- "seal"
image_dir <- paste("/Users/sigmamonstr/Github/noaa_seals/code/R/",target_folder,sep="")
#Parameters
resize_edge = 100
##Load in image
for(classes in c(class1,class2)){
#Set working directory
setwd(paste(image_dir,classes,sep="/"))
img_set = list.files(pattern="*.jpg")
#Read in image
dataset = data.frame()
for(k in 1:length(img_set)){
#Counter
print(paste(classes,": ",round(100*k/length(img_set),1),"%",sep=""))
#Read in image
img <- readImage(img_set[z])
#Resize
r = resize(img, w = resize_edge, h = resize_edge)
#Equal channels
img = (r@.Data[,,1]+r@.Data[,,2]+r@.Data[,,3])/3
#Image to vector
dataset = rbind(dataset, data.frame(file = img_set[z],
target = classes,
matrix(img,nrow=1,ncol= resize_edge^2)))
}
}
View(dataset)
length(img_set)
dataset = data.frame( matrix(NA, nrow = length(img_set), ncol = 2+ resize_edge^2 ))
colnames(dataset)[1:2] <- c("file","target")
dataset[z,1] <- img_set[z]
dataset[z,2] <- classes
dataset[z,3:ncol(dataset)] <- matrix(img,nrow=1,ncol= resize_edge^2)
View(dataset)
str(dataset[,5])
require(EBImage)
###Set Directories
target_folder <- "target_folder"
class1 <- "none"
class2 <- "seal"
image_dir <- paste("/Users/sigmamonstr/Github/noaa_seals/code/R/",target_folder,sep="")
#Parameters
resize_edge = 100
##Load in image
master <- data.frame()
for(classes in c(class1,class2)){
#Set working directory
setwd(paste(image_dir,classes,sep="/"))
img_set = list.files(pattern="*.jpg")
#Read in image
dataset = data.frame( matrix(NA, nrow = length(img_set), ncol = 2+ resize_edge^2 ))
colnames(dataset)[1:2] <- c("file","target")
for(k in 1:length(img_set)){
#Counter
print(paste(classes,": ",round(100*k/length(img_set),1),"%",sep=""))
#Read in image
img <- readImage(img_set[z])
#Resize
r = resize(img, w = resize_edge, h = resize_edge)
#Equal channels
img = (r@.Data[,,1]+r@.Data[,,2]+r@.Data[,,3])/3
#Image to vector
dataset[z,1] <- img_set[z]
dataset[z,2] <- classes
dataset[z,3:ncol(dataset)] <- matrix(img,nrow=1,ncol= resize_edge^2)
}
master <- rbind(master,dataset)
}
View(master)
require(EBImage)
###Set Directories
target_folder <- "target_folder"
class1 <- "none"
class2 <- "seal"
image_dir <- paste("/Users/sigmamonstr/Github/noaa_seals/code/R/",target_folder,sep="")
#Parameters
resize_edge = 100
##Load in image
master <- data.frame()
for(classes in c(class1,class2)){
#Set working directory
setwd(paste(image_dir,classes,sep="/"))
img_set = list.files(pattern="*.jpg")
#Read in image
dataset = data.frame( matrix(NA, nrow = length(img_set), ncol = 2+ resize_edge^2 ))
colnames(dataset)[1:2] <- c("file","target")
for(k in 1:length(img_set)){
#Counter
print(paste(classes,": ",round(100*k/length(img_set),1),"%",sep=""))
#Read in image
img <- readImage(img_set[k])
#Resize
r = resize(img, w = resize_edge, h = resize_edge)
#Equal channels
img = (r@.Data[,,1]+r@.Data[,,2]+r@.Data[,,3])/3
#Image to vector
dataset[z,1] <- img_set[k]
dataset[z,2] <- classes
dataset[z,3:ncol(dataset)] <- matrix(img,nrow=1,ncol= resize_edge^2)
}
master <- rbind(master,dataset)
}
View(dataset)
img_set[k]
require(EBImage)
###Set Directories
target_folder <- "target_folder"
class1 <- "none"
class2 <- "seal"
image_dir <- paste("/Users/sigmamonstr/Github/noaa_seals/code/R/",target_folder,sep="")
#Parameters
resize_edge = 100
##Load in image
master <- data.frame()
for(classes in c(class1,class2)){
#Set working directory
setwd(paste(image_dir,classes,sep="/"))
img_set = list.files(pattern="*.jpg")
#Read in image
dataset = data.frame( matrix(NA, nrow = length(img_set), ncol = 2+ resize_edge^2 ))
colnames(dataset)[1:2] <- c("file","target")
for(k in 1:length(img_set)){
#Counter
print(paste(classes,": ",round(100*k/length(img_set),1),"%",sep=""))
#Read in image
img <- readImage(img_set[k])
#Resize
r = resize(img, w = resize_edge, h = resize_edge)
#Equal channels
img = (r@.Data[,,1]+r@.Data[,,2]+r@.Data[,,3])/3
#Image to vector
dataset[k,1] <- img_set[k]
dataset[k,2] <- classes
dataset[k,3:ncol(dataset)] <- matrix(img,nrow=1,ncol= resize_edge^2)
}
master <- rbind(master,dataset)
}
View(master)
hist(master[,3])
train <- train[rand>0.7,]
train <- master[rand>0.7,]
row.names(master)
train <- master[row.names(master)*(rand>0.7),]
rand <- runif(nrow(master))
train <- master[row.names(master)*(rand>0.7),]
rand <- runif(nrow(master))
nrow(master)
smp_size <- floor(0.75 * nrow(master))
smp_size
seq_len(nrow(master))
## Partition into 70/30
ssize <- floor(0.7*nrow(master))
set.seed(123)
index <- sample(seq_len(nrow(master)), size = ssize)
#Train
train <- master[index, ]
test <- master[-index, ]
master$file <- NULL
## Partition into 70/30
ssize <- floor(0.7*nrow(master))
set.seed(123)
index <- sample(seq_len(nrow(master)), size = ssize)
#Train
train <- master[index, ]
test <- master[-index, ]
str(master$target)
iris
str(iris)
master$target <- as.factor(master$target)
master$target <- as.factor(master$target)
## Partition into 70/30
ssize <- floor(0.7*nrow(master))
set.seed(123)
index <- sample(seq_len(nrow(master)), size = ssize)
#Train
train <- master[index, ]
test <- master[-index, ]
svm <- svm(target ~ ., data = train)
library("e1071")
svm <- svm(target ~ ., data = train)
summary(svm)
pred <- predict(svm,test)
table(pred,test$target)
174+94
(174+94)/nrow(test)
svm_tune <- tune(svm, train.x= train[,2:ncol(train)], train.y=train[,1],
kernel="radial", ranges=list(cost=10^(-1:2), gamma=c(.5,1,2)))
print(svm_tune)
svm_tune <- tune(svm, train.x= train[,2:ncol(train)], train.y=train[,1], kernel="radial", ranges=list(cost=10^(-1:2), gamma=c(.5,1,2)))
list(cost=10^(-1:2)
)
list(cost=10^(-1:2), gamma=c(.5,1,2))
kernel="radial", ranges=list(cost=10^(-1:2), gamma=c(.5,1,2)))
svm_tune <- tune(svm, train.x= train[,2:ncol(train)], train.y=train[,1], kernel="radial", ranges=list(cost=10^(-1:2), gamma=c(.5,1,2)))
svm_tune <- tune(svm, train.x= train[,2:ncol(train)], train.y=train[,1], kernel="radial",  ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
x.train = train[,-1]
x.test = test[,-1]
y.train = train[,1]
x.train = train[,-1]
y.test = test[,1]
x.test = test[,-1]
svm_tune <- tune(svm, y.train ~ x.train, kernel="radial",  ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
svm_tune <- tune(svm, y.train ~ as.matrix(x.train), kernel="radial",  ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
svm_tune <- tune(svm, y.train ~ as.matrix(x.train), kernel="radial",  ranges = as.character(list(epsilon = seq(0,1,0.1), cost = 2^(2:9))))
mytunedsvm <- tune.svm(target ~ ., data = train, gamma = 2^(-1:1), cost = 2^(2:4))
print(mytunedsvm)
2^(-1:1)
tuned <- mytunedsvm
plot(tuned)
tune$best.model
tuneResult <- tune(target ~ ., data = train,
ranges = list(epsilon = seq(0,0.2,0.01), cost = 2^(2:9))
)
tuneResult <- tune(target ~ ., data = train, ranges = list(epsilon = seq(0,0.2,0.01), cost = 2^(2:9))
tuneResult <- tune(target ~ ., data = train, ranges = list(epsilon = seq(0,0.2,0.01), cost = 2^(2:9)))
tuneResult <- tune.svm(target ~ ., data = train, ranges = list(epsilon = seq(0,0.2,0.01), cost = 2^(2:9)))
tuneResult <- tune.svm(target ~ ., data = train, epsilon = seq(0,0.2,0.01), cost = 2^(2:9))
install.packages("~/Desktop/beaR_0.0.5.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/beaR_0.0.5.tar.gz", repos = NULL, type = "source", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("~/Desktop/beaR_0.0.5.tar.gz", repos = NULL, type = "source")
library(beaR)
￼head( beaSearch('tobacco'))
head(beaSearch('tobacco'))
